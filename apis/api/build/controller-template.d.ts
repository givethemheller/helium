export declare const modelControllerTemplate = "\n{{=<% %>=}}\nimport {\n  Get,\n  Route,\n  Tags,\n  Header,\n  Request,\n  Post,\n  Body,\n  Put,\n  Delete,\n  Security\n} from \"tsoa\";\nimport {\n  <% objModel %>,  \n  <% BaseType %>,\n  <% BaseType %>Document, \n<%#operations.create.enabled %>\n  <% BaseType %>Create,\n  createDoc,\n<%/operations.create.enabled %>\n<% #operations.find.enabled %>\n  findMany,\n  findOne,\n<%/operations.find.enabled %>\n  updateDoc,\n  deletDoc\n} from \"@helium/api-shared\";\nimport * as express from \"express\";\n\n@Route(\"<% objModel %>\")\nexport class <% objModel %>Controller {\n\n/**\n * \n * @param {object} request \n * @param {object} requestBody \n * @param {integer} page the page that is returned \n * @param {integer} count the number of records in the page\n * \n * @isInt page\n * @isInt count\n */\n  @Security(\"jwt\", [\"admin\"])\n  @Post(\"find/all\")\n  @Tags(\"<% objModel %>\")\n  public async AdminFind<% objModel %>(\n    @Request() request: express.Request,\n    @Header(\"page\") page: number = 1,\n    @Header(\"count\") count: number = 10\n  ): Promise<<% BaseType %>[]> {\n    if (page && count) {\n      return findMany<<% BaseType %>Document, <% BaseType %>>(\n        <% objModel %>,\n        false,\n        false,\n        {\n          count,\n          page\n        },\n        undefined,\n        request.res.locals.userData\n      );\n    } else {\n      return findMany<<% BaseType %>Document,<% BaseType %>>(\n        <% objModel %>,\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        request.res.locals.userData\n      );\n    }\n  }\n\n  /**\n   * \n   * @param {object} request \n   * @param {object} requestBody \n   * @param {number} page page needs description\n   * @param {number} count count needs description\n   * \n   * @isInt page non decimal\n   * @isInt count non decimal\n   */\n  @Security(\"jwt\", [\"admin\"])\n  @Post(\"find\")\n  @Tags(\"<% objModel %>\")\n  public async Find<% objModel %>s(\n    @Request() request: express.Request,\n    @Body() requestBody: { conditions: any},\n    @Header(\"page\") page: number = 0,\n    @Header(\"count\") count: number = 20\n  ): Promise<<% BaseType %>[]> {\n    if (page && count) {\n      return findMany<<% BaseType %>Document, <% BaseType %>>(\n        <% objModel %>,\n        requestBody.conditions,\n        false,\n        {\n          count,\n          page\n        },\n        undefined,\n        request.res.locals.userData\n      );\n    } else {\n      return findMany<<% BaseType %>Document, <% BaseType %>>(\n        <% objModel %>,\n        requestBody.conditions,\n        undefined,\n        undefined,\n        undefined,\n        request.res.locals.userData\n      );\n    }\n  }\n\n  @Security(\"jwt\", [\"owner\"])\n  @Get(\"{<% objModel %>Id}\")\n  @Tags(\"<% objModel %>\")\n  public async Get<% objModel %>(\n    @Request() request: express.Request,\n    <% objModel %>Id: string\n  ): Promise<<% BaseType %>> {\n    return findOne<<% BaseType %>Document, <% BaseType %>>(<% objModel %>, false, <% objModel %>Id);\n  }\n<% #operations.create %>\n  @Post()\n  @Tags(\"<% objModel %>\")\n  public async Create<% objModel %>(\n    @Request() request: express.Request,\n    @Body() requestBody: <% BaseType %>Create\n  ): Promise<<% BaseType %>> {\n    return createDoc<<% BaseType %>Document, <% BaseType %>>(\n      <% objModel %>,\n      requestBody,\n      request.res.locals.userData\n    );\n  }\n<%/operations.create %>\n  @Security(\"jwt\", [\"owner\"])\n  @Put(\"{<% objModel %>Id}\")\n  @Tags(\"<% objModel %>\")\n  public async Update<% objModel %>(\n    <% objModel %>Id: string,\n    @Body() requestBody: <% BaseType %>Create,\n    @Request() request: express.Request\n  ): Promise<<% BaseType %>> {\n    return updateDoc<<% BaseType %>Document, <% BaseType %>>(\n      <% objModel %>,\n      <% objModel %>Id,\n      [{ ...requestBody }],\n      request.res.locals.userData\n    );\n  }\n\n  @Security(\"jwt\", [\"owner\"])\n  @Delete(\"{<% objModel %>Id}\")\n  @Tags(\"<% objModel %>\")\n  public async delete<% objModel %>(\n    <% objModel %>Id: string,\n    @Request() request: express.Request\n  ): Promise<boolean> {\n    return deletDoc<<% BaseType %>Document, <% BaseType %>>(<% objModel %>, <% objModel %>Id, request.res.locals.userData);\n  }\n}\n";
